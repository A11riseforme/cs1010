/**
 * CS1010 Semester 1 AY18/19
 * Assignment 4: Add
 *
 * @file: add.c
 * @author: YANG CHENGLONG (Group 01)
 */
#include "cs1010.h"
#include <string.h>
#include <math.h>
#include <stdio.h>

int main() {
    char *num1 = cs1010_read_word();
    char *num2 = cs1010_read_word();
    // num1_len is the length of the first number to add.
    long num1_len = strlen(num1);
    // num2_len is the length of the second number to add.
    long num2_len = strlen(num2);
    // max is the maximum length out of the two numbers.
    long max;
    // min is the minimum length out of the two numbers.
    long min;
    // diff is the difference between max and min.
    long diff = labs(num1_len - num2_len);
    // i is the index of the first number to start to work with.
    long i;
    // j is the index of the second number to start to work with.
    long j;
    // initialize the value of max and min, i and j.
    if (num1_len > num2_len) {
        max = num1_len;
        i = max - 1;
        min = num2_len;
        j = min - 1;
    } else {
        max = num2_len;
        j = max - 1;
        min = num1_len;
        i = min - 1;
    }
    /** 
     * assign max to a new variable max1
     * because later we will manipulate max.
     */
    long max1 = max;
    // sum is the sum of single digit of two numbers.
    int sum;
    /**
     * tenth is the "tens" to pass to the next addition from current one.
     * eg: 7 + 8 = 15, so 1 will be passed to the next addition.
     */
    int tenth = 0;
    /**
     * result is the result of addition, the max length of result
     * should be one char longer than the longest number.
     */
    char result[max + 1];
    // initialize the result array.
    for (int i = 0; i <= max; i += 1) {
        result[i] = '0';
    }
    /**
     * start addition from the end of both number,
     * stop until any one number has reached to the start.
     */
    while (i >= 0 && j >= 0) {
        sum = ((num1[i] - '0') + (num2[j] - '0') + tenth) % 10 ;
        tenth =  ((num1[i] - '0') + (num2[j] - '0') + tenth) / 10;
        result[max] = sum + '0';
        max -= 1;
        i -= 1;
        j -= 1;
    }
    /**
     * if num1 is longer than num2, the rest of the result
     * would come from num1. Otherwise, from num2.
     */
    if (num1_len > num2_len) {
        for (int i = diff - 1; i >= 0; i -= 1) {
            sum = ((num1[i] - '0') + tenth) % 10 ;
            tenth = ((num1[i] - '0') + tenth) / 10 ;
            result[i + 1] = sum + '0';
        }
        /**
         * the first char of result would come from the tenth
         * which is from the addition of the first char of num1 and tenth.
         */
        result[0] = tenth + '0';
    } else {
        for (int i = diff - 1; i >= 0; i -= 1) {
            sum = ((num2[i] - '0') + tenth) % 10 ;
            tenth = ((num2[i] - '0') + tenth) / 10 ;
            result[i + 1] = sum + '0';
        }
        /**
         * the first char of result would come from the tenth
         * which is from the addition of the first char of num2 and tenth.
         */
        result[0] = tenth + '0';
    }
    // if the first char of result is '0', start to print from the second char.
    if (result[0] == '0') {
        for (int i = 1; i <= max1; i += 1) {
            putchar(result[i]);
        }
    } else {
        cs1010_print_string(result);
    }
}
